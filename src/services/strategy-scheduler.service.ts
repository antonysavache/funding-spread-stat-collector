import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { SpreadDataService } from './spread-data.service';
import { Strategy1Service } from './strategy1.service';
import { Strategy2Service } from './strategy2.service';
import { StrategyAllocatorService, StrategyDecision } from './strategy-allocator.service';
import { CommissionService } from './commission.service';
import { FundingMonitoringService } from './funding-monitoring.service';
import { GoogleSheetsService } from './google-sheets.service';

@Injectable()
export class StrategySchedulerService {
  private readonly logger = new Logger(StrategySchedulerService.name);
  private decisions: StrategyDecision[] = [];

  constructor(
    private readonly spreadDataService: SpreadDataService,
    private readonly strategy1Service: Strategy1Service,
    private readonly strategy2Service: Strategy2Service,
    private readonly strategyAllocator: StrategyAllocatorService,
    private readonly commissionService: CommissionService,
    private readonly fundingMonitoring: FundingMonitoringService,
    private readonly googleSheetsService: GoogleSheetsService
  ) {}

  @Cron('*/2 * * * *') // –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  async analyzeStrategies(): Promise<void> {
    this.logger.log('üïê –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å endpoint
      const spreadsData = await this.spreadDataService.fetchSpreadsData();
      
      if (!spreadsData || spreadsData.length === 0) {
        this.logger.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π');
        return;
      }

      this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${spreadsData.length} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

      // 1.5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
      this.checkPotentialTrades(spreadsData);

      // 2. –ê–Ω–∞–ª–∏–∑ Strategy 1 (Rate Arbitrage)
      const strategy1Opportunities = this.strategy1Service.analyzeAllTickers(spreadsData);
      
      // 3. –ê–Ω–∞–ª–∏–∑ Strategy 2 (Timing Arbitrage)
      const strategy2Opportunities = this.strategy2Service.analyzeAllTickers(spreadsData);

      // 4. Strategy Allocator –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
      const decision = this.strategyAllocator.analyzeAndDecide(
        strategy1Opportunities, 
        strategy2Opportunities
      );

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.decisions.push(decision);

      // 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ Google Sheets
      await this.googleSheetsService.addTradeToSheet(decision);

      // 7. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è
      await this.executeDecision(decision);

      // 7. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
      if (this.decisions.length > 100) {
        this.decisions = this.decisions.slice(-100);
      }

      // 8. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.fundingMonitoring.cleanupOldChecks();

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:', error.message);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è Strategy Allocator
   */
  private async executeDecision(decision: StrategyDecision): Promise<void> {
    switch (decision.action) {
      case 'enter_strategy1':
        this.logger.log(`üöÄ –í–•–û–î –í STRATEGY 1: ${decision.selectedOpportunities[0].ticker}`);
        this.simulateTradeEntry(decision.selectedOpportunities[0], 'Strategy 1');
        break;

      case 'enter_strategy2':
        this.logger.log(`üöÄ –í–•–û–î –í STRATEGY 2: ${decision.selectedOpportunities[0].ticker}`);
        this.simulateTradeEntry(decision.selectedOpportunities[0], 'Strategy 2');
        break;

      case 'enter_both':
        this.logger.log(`üöÄ –í–•–û–î –í –û–ë–ï –°–¢–†–ê–¢–ï–ì–ò–ò: ${decision.selectedOpportunities.map(o => o.ticker).join(', ')}`);
        decision.selectedOpportunities.forEach((opp, index) => {
          const strategyName = opp.strategy === 'rate_arbitrage' ? 'Strategy 1' : 'Strategy 2';
          this.simulateTradeEntry(opp, strategyName);
        });
        break;

      case 'skip':
        this.logger.log(`‚è≠Ô∏è –ü–†–û–ü–£–°–ö: ${decision.reason}`);
        break;
    }
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
   */
  private simulateTradeEntry(opportunity: any, strategyName: string): void {
    const positionSize = 1000; // $1000
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
    const marketCommissions = this.commissionService.calculateCommissions(
      opportunity.longExchange,
      opportunity.shortExchange,
      positionSize,
      false
    );
    
    const limitMarketCommissions = this.commissionService.calculateCommissions(
      opportunity.longExchange,
      opportunity.shortExchange,
      positionSize,
      true
    );

    const bestCommissions = limitMarketCommissions.totalCommission < marketCommissions.totalCommission 
      ? limitMarketCommissions 
      : marketCommissions;

    const grossProfit = opportunity.fundingDiff * positionSize;
    const netProfit = grossProfit - bestCommissions.totalCommission;
    
    this.logger.log(`
üí∞ –ò–ú–ò–¢–ê–¶–ò–Ø –í–•–û–î–ê –í –°–î–ï–õ–ö–£ (${strategyName}):
–¢–∏–∫–µ—Ä: ${opportunity.ticker}
–ë–∏—Ä–∂–∏: ${opportunity.longExchange} / ${opportunity.shortExchange}
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${positionSize}
–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: $${grossProfit.toFixed(4)} (${(opportunity.fundingDiff * 100).toFixed(4)}%)
–ö–æ–º–∏—Å—Å–∏–∏ (${bestCommissions.commissionType}): $${bestCommissions.totalCommission.toFixed(4)}
  ‚îú‚îÄ –í—Ö–æ–¥ –ª–æ–Ω–≥: $${bestCommissions.entryCommissionLong.toFixed(4)}
  ‚îú‚îÄ –í—Ö–æ–¥ —à–æ—Ä—Ç: $${bestCommissions.entryCommissionShort.toFixed(4)}
  ‚îú‚îÄ –í—ã—Ö–æ–¥ –ª–æ–Ω–≥: $${bestCommissions.exitCommissionLong.toFixed(4)}
  ‚îî‚îÄ –í—ã—Ö–æ–¥ —à–æ—Ä—Ç: $${bestCommissions.exitCommissionShort.toFixed(4)}
–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: $${netProfit.toFixed(4)} (${(netProfit/positionSize*100).toFixed(4)}%)
–î–æ –≤—ã–ø–ª–∞—Ç—ã: ${opportunity.timeToFunding.toFixed(1)} –º–∏–Ω—É—Ç
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `);

    // üîç –ó–ê–ü–£–°–ö–ê–ï–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì FUNDING RATE
    // –î–ª—è Strategy 1 - –º–æ–Ω–∏—Ç–æ—Ä–∏–º –æ–±–µ –±–∏—Ä–∂–∏
    if (opportunity.strategy === 'rate_arbitrage') {
      this.fundingMonitoring.startPositionMonitoring(
        opportunity.ticker,
        opportunity.longExchange,
        opportunity.longFundingRate,
        opportunity.nextFundingTime,
        'rate_arbitrage'
      );
      
      this.fundingMonitoring.startPositionMonitoring(
        opportunity.ticker,
        opportunity.shortExchange,
        opportunity.shortFundingRate,
        opportunity.nextFundingTime,
        'rate_arbitrage'
      );
    } 
    // –î–ª—è Strategy 2 - –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–µ—Ä–≤—É—é –±–∏—Ä–∂—É (—Å –±–ª–∏–∂–∞–π—à–µ–π –≤—ã–ø–ª–∞—Ç–æ–π)
    else if (opportunity.strategy === 'timing_arbitrage') {
      this.fundingMonitoring.startPositionMonitoring(
        opportunity.ticker,
        opportunity.longExchange, // –ü–µ—Ä–≤–∞—è –±–∏—Ä–∂–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        opportunity.longFundingRate,
        opportunity.nextFundingTime,
        'timing_arbitrage'
      );
    }
  }

  @Cron('*/10 * * * *') // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  async logDetailedStatistics(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const spreadsData = await this.spreadDataService.fetchSpreadsData();
      
      if (!spreadsData || spreadsData.length === 0) {
        return;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é
      const strategy1Opportunities = this.strategy1Service.analyzeAllTickers(spreadsData);
      const strategy2Opportunities = this.strategy2Service.analyzeAllTickers(spreadsData);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—è–º
      const decisionStats = this.decisions.length > 0 
        ? this.strategyAllocator.getDecisionStats(this.decisions)
        : null;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ funding rate
      const monitoringStats = this.fundingMonitoring.getStabilityStats();
      const activeMonitoring = this.fundingMonitoring.getActiveMonitoring();

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—ã–Ω–∫—É
      const totalTickers = spreadsData.length;
      const spreads = spreadsData.map(t => t.spread).filter(s => s > 0);
      const avgSpread = spreads.length > 0 ? spreads.reduce((a, b) => a + b, 0) / spreads.length : 0;
      const maxSpread = spreads.length > 0 ? Math.max(...spreads) : 0;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º
      const exchangeStats = this.calculateExchangeStats(spreadsData);

      this.logger.log(`
üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–´–ù–ö–ê:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä –û–ë–©–ò–ï –î–ê–ù–ù–´–ï:
–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: ${totalTickers}
–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: ${(avgSpread * 100).toFixed(4)}%
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: ${(maxSpread * 100).toFixed(4)}%

üéØ –°–¢–†–ê–¢–ï–ì–ò–ò:
Strategy 1 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: ${strategy1Opportunities.length}
Strategy 2 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: ${strategy2Opportunities.length}

üè¶ –ë–ò–†–ñ–ò:
${Object.entries(exchangeStats).map(([exchange, count]) => 
  `${exchange}: ${count} —Ç–∏–∫–µ—Ä–æ–≤`
).join('\n')}

${decisionStats ? `
üéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–®–ï–ù–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${this.decisions.length}):
–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${decisionStats.total}
Strategy 1 –≤—Ö–æ–¥–æ–≤: ${decisionStats.strategy1}
Strategy 2 –≤—Ö–æ–¥–æ–≤: ${decisionStats.strategy2}
–û–±–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${decisionStats.both}
–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${decisionStats.skipped}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${decisionStats.successRate}
–°—Ä–µ–¥–Ω—è—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${decisionStats.avgPotentialProfit}
` : ''}

üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì FUNDING RATE:
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${activeMonitoring.length}
–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${monitoringStats.totalChecks}
–°—Ç–∞–±–∏–ª—å–Ω—ã—Ö: ${monitoringStats.stableCount}
–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö: ${monitoringStats.unstableCount}
–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${monitoringStats.stabilityRate}
–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${monitoringStats.avgChangePercent}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      `);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }

  private calculateExchangeStats(spreadsData: any[]): Record<string, number> {
    const exchanges = ['binance', 'bybit', 'bitget', 'bingx', 'mexc', 'bitmex', 'okx'];
    const stats: Record<string, number> = {};

    exchanges.forEach(exchange => {
      stats[exchange] = spreadsData.filter(ticker => 
        ticker[exchange] && ticker[exchange].fundingRate !== null && ticker[exchange].fundingRate !== undefined
      ).length;
    });

    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º
   */
  private checkPotentialTrades(spreadsData: any[]): void {
    const currentTime = Date.now();
    const potentialTrades: any[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    spreadsData.forEach(ticker => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å –Ω—É–ª–µ–≤—ã–º —Å–ø—Ä–µ–¥–æ–º
      if (!ticker.spread || ticker.spread <= 0) return;

      // –ò—â–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –±–∏—Ä–∂ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
      const exchanges = ['binance', 'bybit', 'bitget', 'bingx', 'mexc', 'bitmex', 'okx'];
      const validExchanges = exchanges.filter(ex => 
        ticker[ex] && 
        ticker[ex].fundingRate !== null && 
        ticker[ex].fundingRate !== undefined &&
        ticker[ex].nextFundingTime
      );

      if (validExchanges.length < 2) return;

      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π funding rate
      let maxRate = -Infinity;
      let minRate = Infinity;
      let maxExchange = '';
      let minExchange = '';
      let nextFundingTime = null;

      validExchanges.forEach(ex => {
        const rate = ticker[ex].fundingRate;
        if (rate > maxRate) {
          maxRate = rate;
          maxExchange = ex;
        }
        if (rate < minRate) {
          minRate = rate;
          minExchange = ex;
        }
        if (!nextFundingTime || ticker[ex].nextFundingTime < nextFundingTime) {
          nextFundingTime = ticker[ex].nextFundingTime;
        }
      });

      const spread = maxRate - minRate;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ nextFundingTime –Ω–µ null
      if (!nextFundingTime) return;
      
      const timeToFunding = (nextFundingTime - currentTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö

      // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏:
      // 1. –°–ø—Ä–µ–¥ –±–æ–ª—å—à–µ 0.3% (—á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –∫–æ–º–∏—Å—Å–∏–∏)
      // 2. –î–æ –≤—ã–ø–ª–∞—Ç—ã –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç –∏ –º–µ–Ω—å—à–µ 8 —á–∞—Å–æ–≤
      if (spread > 0.003 && timeToFunding > 10 && timeToFunding < 480) {
        potentialTrades.push({
          ticker: ticker.ticker,
          spread: spread,
          spreadPercent: (spread * 100).toFixed(4),
          longExchange: minExchange,  // –ü–æ–∫—É–ø–∞–µ–º –≥–¥–µ funding rate –º–µ–Ω—å—à–µ
          shortExchange: maxExchange, // –ü—Ä–æ–¥–∞–µ–º –≥–¥–µ funding rate –±–æ–ª—å—à–µ
          longRate: minRate,
          shortRate: maxRate,
          timeToFunding: timeToFunding,
          timeToFundingFormatted: this.formatTimeToFunding(timeToFunding),
          potentialProfit: this.estimatePotentialProfit(spread, 1000)
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–ø—Ä–µ–¥–∞
    potentialTrades.sort((a, b) => b.spread - a.spread);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-5 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if (potentialTrades.length > 0) {
      this.logger.log(`
üîÆ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –°–î–ï–õ–ö–ò –í –ë–õ–ò–ñ–ê–ô–®–ï–ï –í–†–ï–ú–Ø:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);

      potentialTrades.slice(0, 5).forEach((trade, index) => {
        this.logger.log(`${index + 1}. ${trade.ticker}
   –°–ø—Ä–µ–¥: ${trade.spreadPercent}% (${trade.longExchange} ‚Üí ${trade.shortExchange})
   –î–æ –≤—ã–ø–ª–∞—Ç—ã: ${trade.timeToFundingFormatted}
   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $${trade.potentialProfit.toFixed(2)} —Å $1000`);
      });

      this.logger.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí° –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${potentialTrades.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Ö–æ–¥–∞ (–∑–∞ 4 –º–∏–Ω—É—Ç—ã –¥–æ –≤—ã–ø–ª–∞—Ç—ã)
`);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ –≤—ã–ø–ª–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  private formatTimeToFunding(minutes: number): string {
    if (minutes < 60) {
      return `${Math.floor(minutes)} –º–∏–Ω`;
    } else {
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = Math.floor(minutes % 60);
      return `${hours}—á ${remainingMinutes}–º–∏–Ω`;
    }
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
   */
  private estimatePotentialProfit(spread: number, positionSize: number): number {
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–∏—Å—Å–∏–π (0.1% –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥)
    const estimatedCommissions = positionSize * 0.002; // 0.2% –æ–±—â–∏—Ö –∫–æ–º–∏—Å—Å–∏–π
    const grossProfit = spread * positionSize;
    return grossProfit - estimatedCommissions;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async manualAnalysis(): Promise<void> {
    this.logger.log('üîß –ó–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π');
    await this.analyzeStrategies();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏–π
   */
  getDecisionHistory(): StrategyDecision[] {
    return [...this.decisions];
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏–π
   */
  clearDecisionHistory(): void {
    this.decisions = [];
    this.logger.log('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
  }
}
