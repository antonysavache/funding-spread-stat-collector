import { Injectable, Logger } from '@nestjs/common';
import { StrategyOpportunity } from '../interfaces/strategy-config.interface';
import { CommissionService } from './commission.service';

export interface StrategyDecision {
  action: 'enter_strategy1' | 'enter_strategy2' | 'enter_both' | 'skip';
  selectedOpportunities: StrategyOpportunity[];
  reason: string;
  totalPotentialProfit: number;
  totalCommissions: number;
  netProfit: number;
  positionSize: number;
}

@Injectable()
export class StrategyAllocatorService {
  private readonly logger = new Logger(StrategyAllocatorService.name);
  private readonly POSITION_SIZE = 1000; // $1000 —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏

  constructor(private readonly commissionService: CommissionService) {}

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
   * @param strategy1Opportunities –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç Strategy 1
   * @param strategy2Opportunities –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç Strategy 2
   * @returns –†–µ—à–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏
   */
  allocateStrategy(
    strategy1Opportunities: StrategyOpportunity[],
    strategy2Opportunities: StrategyOpportunity[]
  ): StrategyDecision {
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (strategy1Opportunities.length === 0 && strategy2Opportunities.length === 0) {
      return {
        action: 'skip',
        selectedOpportunities: [],
        reason: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
        totalPotentialProfit: 0,
        totalCommissions: 0,
        netProfit: 0,
        positionSize: this.POSITION_SIZE
      };
    }

    // –ë–µ—Ä–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
    const bestStrategy1 = strategy1Opportunities.length > 0 
      ? this.calculateNetProfit(strategy1Opportunities[0]) 
      : null;
    const bestStrategy2 = strategy2Opportunities.length > 0 
      ? this.calculateNetProfit(strategy2Opportunities[0]) 
      : null;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ Strategy 1
    if (bestStrategy1 && !bestStrategy2) {
      return {
        action: 'enter_strategy1',
        selectedOpportunities: [bestStrategy1.opportunity],
        reason: `–¢–æ–ª—å–∫–æ Strategy 1 –¥–æ—Å—Ç—É–ø–Ω–∞: ${bestStrategy1.opportunity.ticker}, —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${bestStrategy1.netProfit.toFixed(4)}`,
        totalPotentialProfit: bestStrategy1.grossProfit,
        totalCommissions: bestStrategy1.totalCommissions,
        netProfit: bestStrategy1.netProfit,
        positionSize: this.POSITION_SIZE
      };
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ Strategy 2
    if (bestStrategy2 && !bestStrategy1) {
      return {
        action: 'enter_strategy2',
        selectedOpportunities: [bestStrategy2.opportunity],
        reason: `–¢–æ–ª—å–∫–æ Strategy 2 –¥–æ—Å—Ç—É–ø–Ω–∞: ${bestStrategy2.opportunity.ticker}, —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: $${bestStrategy2.netProfit.toFixed(4)}`,
        totalPotentialProfit: bestStrategy2.grossProfit,
        totalCommissions: bestStrategy2.totalCommissions,
        netProfit: bestStrategy2.netProfit,
        positionSize: this.POSITION_SIZE
      };
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (bestStrategy1 && bestStrategy2) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–Ω—ã–µ –ª–∏ —ç—Ç–æ —Ç–∏–∫–µ—Ä—ã
      if (bestStrategy1.opportunity.ticker !== bestStrategy2.opportunity.ticker) {
        // –†–∞–∑–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã - –º–æ–∂–µ–º –≤–æ–π—Ç–∏ –≤ –æ–±–µ (–µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)
        const totalGrossProfit = bestStrategy1.grossProfit + bestStrategy2.grossProfit;
        const totalCommissions = bestStrategy1.totalCommissions + bestStrategy2.totalCommissions;
        const totalNetProfit = bestStrategy1.netProfit + bestStrategy2.netProfit;
        
        return {
          action: 'enter_both',
          selectedOpportunities: [bestStrategy1.opportunity, bestStrategy2.opportunity],
          reason: `–†–∞–∑–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: ${bestStrategy1.opportunity.ticker} (—á–∏—Å—Ç–∞—è: $${bestStrategy1.netProfit.toFixed(4)}) –∏ ${bestStrategy2.opportunity.ticker} (—á–∏—Å—Ç–∞—è: $${bestStrategy2.netProfit.toFixed(4)})`,
          totalPotentialProfit: totalGrossProfit,
          totalCommissions: totalCommissions,
          netProfit: totalNetProfit,
          positionSize: this.POSITION_SIZE * 2
        };
      } else {
        // –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–∏–∫–µ—Ä - –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ø–æ –ß–ò–°–¢–û–ô –ø—Ä–∏–±—ã–ª–∏
        if (bestStrategy1.netProfit >= bestStrategy2.netProfit) {
          return {
            action: 'enter_strategy1',
            selectedOpportunities: [bestStrategy1.opportunity],
            reason: `Strategy 1 –≤—ã–≥–æ–¥–Ω–µ–µ –¥–ª—è ${bestStrategy1.opportunity.ticker}: —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $${bestStrategy1.netProfit.toFixed(4)} vs $${bestStrategy2.netProfit.toFixed(4)}`,
            totalPotentialProfit: bestStrategy1.grossProfit,
            totalCommissions: bestStrategy1.totalCommissions,
            netProfit: bestStrategy1.netProfit,
            positionSize: this.POSITION_SIZE
          };
        } else {
          return {
            action: 'enter_strategy2',
            selectedOpportunities: [bestStrategy2.opportunity],
            reason: `Strategy 2 –≤—ã–≥–æ–¥–Ω–µ–µ –¥–ª—è ${bestStrategy2.opportunity.ticker}: —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $${bestStrategy2.netProfit.toFixed(4)} vs $${bestStrategy1.netProfit.toFixed(4)}`,
            totalPotentialProfit: bestStrategy2.grossProfit,
            totalCommissions: bestStrategy2.totalCommissions,
            netProfit: bestStrategy2.netProfit,
            positionSize: this.POSITION_SIZE
          };
        }
      }
    }

    // Fallback (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å—é–¥–∞ –¥–æ–π—Ç–∏)
    return {
      action: 'skip',
      selectedOpportunities: [],
      reason: '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
      totalPotentialProfit: 0,
      totalCommissions: 0,
      netProfit: 0,
      positionSize: this.POSITION_SIZE
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
   */
  private calculateNetProfit(opportunity: StrategyOpportunity) {
    // –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç —Å–ø—Ä–µ–¥–∞
    const grossProfit = opportunity.fundingDiff * this.POSITION_SIZE;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π —Ç–∏–ø - –ª–∏–º–∏—Ç+–º–∞—Ä–∫–µ—Ç)
    const marketCommissions = this.commissionService.calculateCommissions(
      opportunity.longExchange,
      opportunity.shortExchange,
      this.POSITION_SIZE,
      false // –≤—Å–µ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
    );
    
    const limitMarketCommissions = this.commissionService.calculateCommissions(
      opportunity.longExchange,
      opportunity.shortExchange,
      this.POSITION_SIZE,
      true // –ª–∏–º–∏—Ç –Ω–∞ –≤—Ö–æ–¥ + –º–∞—Ä–∫–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥
    );

    // –í—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–π
    const bestCommissions = limitMarketCommissions.totalCommission < marketCommissions.totalCommission 
      ? limitMarketCommissions 
      : marketCommissions;

    const netProfit = grossProfit - bestCommissions.totalCommission;

    return {
      opportunity,
      grossProfit,
      totalCommissions: bestCommissions.totalCommission,
      netProfit,
      commissionType: bestCommissions.commissionType
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   * @param strategy1Opportunities –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç Strategy 1
   * @param strategy2Opportunities –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç Strategy 2
   * @returns –†–µ—à–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  analyzeAndDecide(
    strategy1Opportunities: StrategyOpportunity[],
    strategy2Opportunities: StrategyOpportunity[]
  ): StrategyDecision {
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    this.logOpportunities('Strategy 1 (Rate Arbitrage)', strategy1Opportunities);
    this.logOpportunities('Strategy 2 (Timing Arbitrage)', strategy2Opportunities);

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    const decision = this.allocateStrategy(strategy1Opportunities, strategy2Opportunities);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
    this.logger.log(`
üéØ –†–ï–®–ï–ù–ò–ï STRATEGY ALLOCATOR:
–î–µ–π—Å—Ç–≤–∏–µ: ${decision.action.toUpperCase()}
–ü—Ä–∏—á–∏–Ω–∞: ${decision.reason}
–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${decision.positionSize}
–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: $${decision.totalPotentialProfit.toFixed(4)} (${(decision.totalPotentialProfit/decision.positionSize*100).toFixed(4)}%)
–ö–æ–º–∏—Å—Å–∏–∏: $${decision.totalCommissions.toFixed(4)}
–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: $${decision.netProfit.toFixed(4)} (${(decision.netProfit/decision.positionSize*100).toFixed(4)}%)
–í—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: ${decision.selectedOpportunities.length}
    `);

    return decision;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private logOpportunities(strategyName: string, opportunities: StrategyOpportunity[]): void {
    if (opportunities.length === 0) {
      this.logger.log(`‚ùå ${strategyName}: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }

    this.logger.log(`‚úÖ ${strategyName}: –Ω–∞–π–¥–µ–Ω–æ ${opportunities.length} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
    opportunities.slice(0, 3).forEach((opp, index) => {
      const profitPercent = (opp.fundingDiff * 100).toFixed(4);
      const timeToFunding = opp.timeToFunding.toFixed(1);
      
      if (opp.strategy === 'rate_arbitrage') {
        this.logger.log(`  ${index + 1}. ${opp.ticker}: ${opp.longExchange}(${(opp.longFundingRate * 100).toFixed(4)}%) / ${opp.shortExchange}(${(opp.shortFundingRate * 100).toFixed(4)}%) = ${profitPercent}% —Å–ø—Ä–µ–¥, –¥–æ –≤—ã–ø–ª–∞—Ç—ã: ${timeToFunding}–º–∏–Ω`);
      } else {
        this.logger.log(`  ${index + 1}. ${opp.ticker}: ${opp.longExchange}(|${(Math.abs(opp.longFundingRate) * 100).toFixed(4)}%|) ‚Üí ${opp.shortExchange}(|${(Math.abs(opp.shortFundingRate) * 100).toFixed(4)}%|), –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${profitPercent}%, –¥–æ –ø–µ—Ä–≤–æ–π –≤—ã–ø–ª–∞—Ç—ã: ${timeToFunding}–º–∏–Ω`);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–Ω—è—Ç—ã–º —Ä–µ—à–µ–Ω–∏—è–º
   */
  getDecisionStats(decisions: StrategyDecision[]): any {
    const stats = {
      total: decisions.length,
      strategy1: decisions.filter(d => d.action === 'enter_strategy1').length,
      strategy2: decisions.filter(d => d.action === 'enter_strategy2').length,
      both: decisions.filter(d => d.action === 'enter_both').length,
      skipped: decisions.filter(d => d.action === 'skip').length,
      totalPotentialProfit: decisions.reduce((sum, d) => sum + d.totalPotentialProfit, 0)
    };

    return {
      ...stats,
      successRate: ((stats.strategy1 + stats.strategy2 + stats.both) / stats.total * 100).toFixed(1) + '%',
      avgPotentialProfit: stats.total > 0 ? (stats.totalPotentialProfit / stats.total * 100).toFixed(4) + '%' : '0%'
    };
  }
}
