import { Injectable, Logger } from '@nestjs/common';
import { google } from 'googleapis';
import { StrategyDecision } from './strategy-allocator.service';
import { FundingStabilityCheck } from '../interfaces/position-monitoring.interface';

@Injectable()
export class GoogleSheetsService {
  private readonly logger = new Logger(GoogleSheetsService.name);
  private sheets: any;
  private readonly spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;

  constructor() {
    this.initializeGoogleSheets();
  }

  private async initializeGoogleSheets() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ Google Sheets
      const enabled = process.env.GOOGLE_SHEETS_ENABLED === 'true';
      if (!enabled) {
        this.logger.log('üìä Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω—ã (GOOGLE_SHEETS_ENABLED=false)');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const credentialsJson = process.env.GOOGLE_SHEETS_CREDENTIALS;
      if (!credentialsJson) {
        this.logger.error('‚ùå GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env');
        return;
      }

      const credentials = JSON.parse(credentialsJson);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API —Å credentials –∏–∑ env
      const auth = new google.auth.GoogleAuth({
        credentials: credentials,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      this.sheets = google.sheets({ version: 'v4', auth });

      this.logger.log('‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ credentials');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API:', error.message);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ Google Sheets
   */
  async addTradeToSheet(decision: StrategyDecision): Promise<void> {
    if (!this.sheets || !this.spreadsheetId) {
      this.logger.warn('Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏');
      return;
    }

    try {
      const timestamp = new Date().toLocaleString('ru-RU');
      const opportunity = decision.selectedOpportunities[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
      const values = [
        [
          timestamp,                                           // A: –í—Ä–µ–º—è
          decision.action.toUpperCase(),                      // B: –î–µ–π—Å—Ç–≤–∏–µ
          opportunity?.ticker || 'N/A',                       // C: –¢–∏–∫–µ—Ä
          opportunity?.longExchange || 'N/A',                 // D: –õ–æ–Ω–≥ –±–∏—Ä–∂–∞
          opportunity?.shortExchange || 'N/A',                // E: –®–æ—Ä—Ç –±–∏—Ä–∂–∞
          opportunity?.strategy || 'N/A',                     // F: –°—Ç—Ä–∞—Ç–µ–≥–∏—è
          (opportunity?.longFundingRate * 100)?.toFixed(4) || '0', // G: –õ–æ–Ω–≥ funding %
          (opportunity?.shortFundingRate * 100)?.toFixed(4) || '0', // H: –®–æ—Ä—Ç funding %
          (decision.totalPotentialProfit)?.toFixed(4) || '0', // I: –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å $
          (decision.totalCommissions)?.toFixed(4) || '0',     // J: –ö–æ–º–∏—Å—Å–∏–∏ $
          (decision.netProfit)?.toFixed(4) || '0',            // K: –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $
          ((decision.netProfit / decision.positionSize) * 100)?.toFixed(4) || '0', // L: –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å %
          decision.positionSize?.toString() || '1000',        // M: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $
          opportunity?.timeToFunding?.toFixed(1) || '0',      // N: –í—Ä–µ–º—è –¥–æ –≤—ã–ø–ª–∞—Ç—ã –º–∏–Ω
          decision.reason || 'N/A'                            // O: –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è
        ]
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
      const request = {
        spreadsheetId: this.spreadsheetId,
        range: 'TradingTrades!A:O', // –õ–∏—Å—Ç "TradingTrades", –∫–æ–ª–æ–Ω–∫–∏ A-O
        valueInputOption: 'RAW',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          values: values
        }
      };

      await this.sheets.spreadsheets.values.append(request);

      this.logger.log(`üìä –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets: ${opportunity?.ticker} (${decision.action})`);

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –≤ Google Sheets:', error.message);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ funding rate
   */
  async addStabilityCheckToSheet(check: FundingStabilityCheck): Promise<void> {
    if (!this.sheets || !this.spreadsheetId) {
      this.logger.warn('Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
      return;
    }

    try {
      const values = [
        [
          check.checkTime.toLocaleString('ru-RU'),           // A: –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          check.ticker,                                       // B: –¢–∏–∫–µ—Ä
          check.exchange,                                     // C: –ë–∏—Ä–∂–∞
          (check.originalFundingRate * 100).toFixed(4),      // D: –ò—Å—Ö–æ–¥–Ω—ã–π funding %
          (check.currentFundingRate * 100).toFixed(4),       // E: –¢–µ–∫—É—â–∏–π funding %
          check.changePercent.toFixed(2),                    // F: –ò–∑–º–µ–Ω–µ–Ω–∏–µ %
          check.isStable ? '–°–¢–ê–ë–ò–õ–¨–ù–´–ô' : '–ò–ó–ú–ï–ù–ò–õ–°–Ø',       // G: –°—Ç–∞—Ç—É—Å
          check.timeBeforeFunding.toFixed(1),                // H: –î–æ –≤—ã–ø–ª–∞—Ç—ã –º–∏–Ω
          check.nextFundingTime.toLocaleString('ru-RU'),     // I: –í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã
          check.positionId                                    // J: ID –ø–æ–∑–∏—Ü–∏–∏
        ]
      ];

      const request = {
        spreadsheetId: this.spreadsheetId,
        range: 'TradingStability!A:J', // –õ–∏—Å—Ç "TradingStability", –∫–æ–ª–æ–Ω–∫–∏ A-J
        valueInputOption: 'RAW',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          values: values
        }
      };

      await this.sheets.spreadsheets.values.append(request);

      this.logger.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets: ${check.ticker} –Ω–∞ ${check.exchange} (${check.isStable ? '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π' : '–∏–∑–º–µ–Ω–∏–ª—Å—è'})`);

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Google Sheets:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
   */
  async createHeaders(): Promise<void> {
    if (!this.sheets || !this.spreadsheetId) {
      this.logger.error('Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    try {
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ Trades
      const tradesHeaders = [
        [
          '–í—Ä–µ–º—è',
          '–î–µ–π—Å—Ç–≤–∏–µ', 
          '–¢–∏–∫–µ—Ä',
          '–õ–æ–Ω–≥ –±–∏—Ä–∂–∞',
          '–®–æ—Ä—Ç –±–∏—Ä–∂–∞',
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
          '–õ–æ–Ω–≥ funding %',
          '–®–æ—Ä—Ç funding %',
          '–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å $',
          '–ö–æ–º–∏—Å—Å–∏–∏ $',
          '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $',
          '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å %',
          '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $',
          '–î–æ –≤—ã–ø–ª–∞—Ç—ã –º–∏–Ω',
          '–ü—Ä–∏—á–∏–Ω–∞'
        ]
      ];

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ Stability
      const stabilityHeaders = [
        [
          '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
          '–¢–∏–∫–µ—Ä',
          '–ë–∏—Ä–∂–∞',
          '–ò—Å—Ö–æ–¥–Ω—ã–π funding %',
          '–¢–µ–∫—É—â–∏–π funding %',
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ %',
          '–°—Ç–∞—Ç—É—Å',
          '–î–æ –≤—ã–ø–ª–∞—Ç—ã –º–∏–Ω',
          '–í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã',
          'ID –ø–æ–∑–∏—Ü–∏–∏'
        ]
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç TradingTrades
      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: 'TradingTrades!A1:O1',
        valueInputOption: 'RAW',
        resource: {
          values: tradesHeaders
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç TradingStability
      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: 'TradingStability!A1:J1',
        valueInputOption: 'RAW',
        resource: {
          values: stabilityHeaders
        }
      });

      this.logger.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ Google Sheets');

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google Sheets:', error.message);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
   */
  async addDailyStats(stats: any): Promise<void> {
    if (!this.sheets || !this.spreadsheetId) {
      this.logger.warn('Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      return;
    }

    try {
      const today = new Date().toLocaleDateString('ru-RU');
      
      const values = [
        [
          today,                                              // A: –î–∞—Ç–∞
          stats.totalAnalyzes || 0,                          // B: –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤
          stats.strategy1Entries || 0,                       // C: –í—Ö–æ–¥—ã Strategy 1
          stats.strategy2Entries || 0,                       // D: –í—Ö–æ–¥—ã Strategy 2
          stats.bothStrategies || 0,                         // E: –û–±–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
          stats.skipped || 0,                                // F: –ü—Ä–æ–ø—É—â–µ–Ω–æ
          stats.successRate || '0%',                         // G: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
          stats.totalNetProfit?.toFixed(4) || '0',          // H: –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å $
          stats.totalCommissions?.toFixed(4) || '0',        // I: –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ $
          stats.avgProfit?.toFixed(4) || '0',               // J: –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å $
          stats.stabilityChecks || 0,                        // K: –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          stats.stableRate || '0%'                          // L: –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        ]
      ];

      const request = {
        spreadsheetId: this.spreadsheetId,
        range: 'TradingStats!A:L',
        valueInputOption: 'RAW',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          values: values
        }
      };

      await this.sheets.spreadsheets.values.append(request);

      this.logger.log(`üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets: ${today}`);

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Google Sheets:', error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
   */
  async testConnection(): Promise<boolean> {
    if (!this.sheets || !this.spreadsheetId) {
      this.logger.error('Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      const response = await this.sheets.spreadsheets.get({
        spreadsheetId: this.spreadsheetId
      });

      this.logger.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ: ${response.data.properties.title}`);
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:', error.message);
      return false;
    }
  }
}
